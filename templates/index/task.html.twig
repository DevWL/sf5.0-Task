{% extends 'base.html.twig' %}

{% block title %}Hello IndexController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <div class="wrap">
        <div class="info-block">
            <p>
                [!] Fixture for task created. Run:<br>
                php bin/console doctrine:migrations:migrate<br>
                php bin/console doctrine:fixtures:load
            </p>
        </div>
        <div class="info-block">
            <p>
                Symfony command:<br>
                php bin/console app:cancel-inactive
            </p>
        </div>
    </div>
    <div class="dec">
        <h2>The problem:</h2>
        <ul>
            <li>One subscription can have many payments. We need to get the latest payments info and based only on newest payment date change subscription status.</li>
            <li>The users who have accounts can have assign subscriptions without making any payments.</li>
            <li>Symfony command "php bin/console app:cancel-inactive" run two complex composed queries, covering both subscription scenarios (with and without payment record)</li>
            <li>Validate card numbers based on selected dropdown field</li>
            <li>If form is valid update subscription and add new payment record</li>
        </ul>
    </div>
    <h2>Task description</h2>
    <pre>
    ZADANIE:
    Use case: Użytkownik aktywuje co miesięczną odnawialną subskrypcję
    na produkt.

        create table subscription
        (
            id int auto_increment primary key,
            user_id int not null,
            subscription_shipping_address_id int null,
            subscription_billing_address_id int null,
            status varchar(16) default 'new' not null,
            subscription_pack_id int not null,
            started_at datetime null,
            updated_at datetime null,
            created_at datetime not null
        );

    INSERT INTO subscription (1,1,1,1,"new",5,null,null,NOW());
    INSERT INTO subscription
    (2,2,2,2,"active",2,"2017-04-01",null,NOW());
    INSERT INTO subscription
    (3,3,3,3,"active",7,"2017-04-15",null,NOW());

        create table subscription_payment
        (
            id int auto_increment primary key,
            subscription_id int null,
            charged_amount int not null,
            date date not null,
            updated_at datetime null,
            created_at datetime not null
        );

    INSERT INTO subscription_payment (1,2,2400,"2017-04-01",null,NOW());
    INSERT INTO subscription_payment (2,2,1700,"2017-05-01",null,NOW());
    INSERT INTO subscription_payment (3,3,3600,"2017-04-15",null,NOW());

    1. Stwórz formularz z polami: CardNumber, CvvNumber, CardType
    (MasterCard [MS], Visa [VI], AmericanExpress [AE]).

    2. Zwaliduj numer karty kredytowej: sprawdź długość numeru oraz
    zależność typu karty z numerem.

    3. Po poprawnym zwalidowaniu danych karty, zmień status subskrypcji
    (id=1) na `active`. Podczas aktywowania wyślij email z informacją o
    aktywacji do użytkownika (nie wysyłaj go fizycznie, wystarczy pusta
    metoda).

    4. Stwórz command, który będzie anulował subskrypcje dla których nie
    odnotowano płatności w terminie 7 dni od daty ich końca, zakładając,
    że jeden miesiąc to równo 30 dni.

    5. Stwórz akcję w kontrolerze, która będzie obsługiwała sekcję
    "Subskrypcji" w ustawieniach konta użytkownika - innymi słowy, lista
    subskrypcji pojedynczego użytkownika, którymi ten może zarządzać.

    Kod NIE musi działać, NIE musi w pełni implementować wszystkich
    metod, ale MUSI w pełni pokazać logikę działania, powinien korzystać z
    mechanizmów frameworka Symfony.

    </pre>
</div>
{% endblock %}
